Tanstack Query - priorly known as React Query

A library that helps with sending  HTTP request & keeping your frontend UI in sync.

It does not send Http request. We have to write the code that actually sends Http request. 
Tanstack query then manages  the data, errors, caching and much more!

We have to provide the fetch function from our side.



Querykey : It can be as simple as single string or as complex as sequence of no of objects.
- Keys are are necessary so that the library can internally cache your data correctly and refetch automatically when a dependency to your query changes.

If any objects are present in the array, then order of the keys in that object does not matter. Means just change in order of that keys does not represents unique key for two requests. They aree considered as same key only.
Ex. - All are same
useQuery({ queryKey: ['todos', { status, page }], ... })
useQuery({ queryKey: ['todos', { page, status }], ...})
useQuery({ queryKey: ['todos', { page, status, other: undefined }], ... })

Although array item order matters, following keys are not equal.
useQuery({ queryKey: ['todos', status, page], ... })
useQuery({ queryKey: ['todos', page, status], ...})
useQuery({ queryKey: ['todos', undefined, page, status], ...})

If your query function depends on a variable, include it in your query key.
in this case our key will act as dependency list also, once the variable used by fetch function(query function) changes, queries will be re-fetched automatically.
Ex.
function Todos({ todoId }) {
  const result = useQuery({
    queryKey: ['todos', todoId],
    queryFn: () => fetchTodoById(todoId),
  })
}


Query function : Literraly any function that return promise, which then should be resolved or return the error.
Errro must be thrown or returned by the query function which then can be persisted by the "error" state.

Querykey will also be passed to the query function as the part of QueryFunctionContext. Means we will get access tot he key array as the parameter of query functin.

QueryFunctionContext is a object provided to all the query functions which contains 
queryKey,
signal : AbortSignal - for query cancellation
meta: additional information about your query
pageParam and direction etc.


Internal Working of the ReactQuery

It all starts with a QueryClient. That's the class you create an instance of, likely at the start of your application, and then make available everywhere via the QueryClientProvider.

The QueryClientProvider uses React Context to distribute the QueryClient throughout the entire application. This created client is a stable value which is cretaed once. It will not make your app re-render, it just gives you access to this client via useQueryClient Hook.

QueryClient is just a container for QueryCache and MutationCache which is automatically created when we create a new QueryClient.
In most situations, you will not interact with the cache directly - you will access it through the QueryClient.

Client let us wotk with cache. Cache or QueryCache is an in-memory object. If we reload our browser page the cache is gone. 

The cache has queries and Query is where most of the logic is happening. It not only contains all the information about a query (its data, status field or meta information like when the last fetch happened), it also executes the query function and contains the retry, cancellation and de-duplication logic.

If a query function should be triggered while we are already fetching, that fetch can be de-duplicated.
If a query is cancelled, it goes back to its previous state.

The qury knows who's interested in the query data, and it can inform those Observers about all changes.

Observers are the glue between the Query and the components that want to use it. An Observer is created when you call useQuery, and it is always subscribed to exactly one query. That's why you have to pass a queryKey to useQuery. 

The Observer does a bit more though - it's where most of the optimizations happen. The Observer knows which properties of the Query a component is using, so it doesn't have to notify it of unrelated changes. As an example, if you only use the data field, the component doesn't have to re-render if isFetching is changing on a background refetch.

